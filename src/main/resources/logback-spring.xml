<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。

    根节点<configuration>下面一共有2个属性，3个子节点：
    两个属性：<contextName>，<property>
    三个子节点：<appender>，<root>，<logger>
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- application.yml传递参数，不能使用logback自带的<property>标签 -->
    <springProperty scope="context" name="logDir" source="logback.logDir"/>
    <springProperty scope="context" name="appName" source="logback.appName"/>

    <!--
        每个logger都关联到logger上下文，默认上下文名称为“default”。
        但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。
        一旦设置，不能修改，可以通过%contextName来打印日志上下文名称。
    -->
    <contextName>${appName}</contextName>

    <!--
        用来定义变量值的标签，<property> 有两个属性，name和value；
        其中name的值是变量的名称，value的值时变量定义的值。
        通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。
    -->
    <property name="log.info.path" value="${logDir}/info.${appName}.log"/>
    <property name="log.error.path" value="${logDir}/error.${appName}.log"/>
    <property name="log.info.pattern.path" value="${logDir}/info.${appName}.%d{yyyy-MM-dd}.log"/>
    <property name="log.error.pattern.path" value="${logDir}/error.${appName}.%d{yyyy-MM-dd}.log"/>

    <!--
        appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。
     -->
    <!-- 输出到控制台 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--
            ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉INFO级别以下的日志不输出到文件中。
            如果不用记得注释掉，不然你控制台会发现没日志~
        -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>

        <!--
            encoder表示对日志进行编码：
            %date{yyyy-MM-dd HH:mm:ss.SSS}：日志输出时间
            %contextName：自定义变量，这里为上下文名称
            %thread：输出日志的进程名字，这在Web应用以及异步任务处理中很有用
            %-5level：日志级别，并且使用5个字符靠左对齐
            %logger{36}：日志输出者的名字，通常是执行类类名
            %msg：日志消息
            %n：平台的换行符
         -->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--
        另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。
        RollingFileAppender用于切分文件日志
    -->
    <!-- 输出info级别日志到文件 -->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--
            如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
            所以我们使用下面的策略，可以避免输出 Error 的日志
        -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>Error</level>
            <!--匹配到就禁止-->
            <onMatch>DENY</onMatch>
            <!--没有匹配到就允许-->
            <onMismatch>ACCEPT</onMismatch>
        </filter>

        <file>${log.info.path}</file>

        <!-- 滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- fileNamePattern定义了日志的切分方式——把每一天的日志归档到一个文件中 -->
            <fileNamePattern>${log.info.pattern.path}</fileNamePattern>
            <!-- maxHistory表示只保留最近30天的日志，以防止日志填满整个磁盘空间 -->
            <maxHistory>30</maxHistory>
            <!-- totalSizeCap用来指定日志文件的上限大小，例如设置为1MB的话，那么到了这个值，就会删除旧的日志。 -->
            <totalSizeCap>1MB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%date{yyyy-MM-dd HH:mm:ss} %contextName [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 输出error级别日志到文件 -->
    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>Error</level>
        </filter>

        <file>${log.error.path}</file>

        <!-- 滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- fileNamePattern定义了日志的切分方式——把每一天的日志归档到一个文件中 -->
            <fileNamePattern>${log.error.pattern.path}</fileNamePattern>
            <!-- maxHistory表示只保留最近30天的日志，以防止日志填满整个磁盘空间 -->
            <maxHistory>30</maxHistory>
            <!-- totalSizeCap用来指定日志文件的上限大小，例如设置为1MB的话，那么到了这个值，就会删除旧的日志。 -->
            <totalSizeCap>1MB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%date{yyyy-MM-dd HH:mm:ss} %contextName [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        不能设置为INHERITED或者同义词NULL，默认是DEBUG。
        <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
    -->
    <root level="info">
        <appender-ref ref="console"/>
        <appender-ref ref="fileInfoLog"/>
        <appender-ref ref="fileErrorLog"/>
    </root>

    <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
        <logger>仅有一个name属性，一个可选的level和一个可选的additivity属性。

        name：用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loggerr将会继承上级的级别。
        additivity：是否向上级logger传递打印信息。默认是true。
    -->
    <!--
        第一种：带有logger的配置，不指定级别，不指定appender。
        <logger name="com.komatsukat.spring.boot.controller"/>将控制controller包下的所有类的日志的打印，
        但是并没用设置打印级别，所以继承他的上级<root>的日志级别“info”。
        没有设置additivity，默认为true，将此logger的打印信息向上级传递；
        没有设置appender，此logger本身不打印任何信息。

        <root level="info">将root的打印级别设置为“info”，指定了名字为“console”的appender。
        当执行com.komatsukat.spring.boot.controller.UserController类的selectUserPaged方法时，
        UserController在包com.komatsukat.spring.boot.controller中，
        所以首先执行<logger name="com.komatsukat.spring.boot.controller"/>，
        将级别为“info”及大于“info”的日志信息传递给root，本身并不打印；
        root接到下级传递的信息，交给已经配置好的名为“console”的appender处理，“console”appender将信息打印到控制台；
    -->
    <logger name="com.komatsukat.spring.boot.controller"/>

    <!--
        第二种：带有多个logger的配置，指定级别，指定appender。
        控制com.komatsukat.spring.boot.controller.UserController类的日志打印，打印级别为“WARN”。
        additivity属性为false，表示此logger的打印信息不再向上级传递。
        指定了名字为“console”的appender。

        当执行com.komatsukat.spring.boot.controller.UserController类的selectUserPaged方法时，
        先执行<logger name="com.komatsukat.spring.boot.controller.UserController" level="WARN" additivity="false">
        将级别为“WARN”及大于“WARN”的日志信息交给此logger指定的名为“console”的appender处理，
        在控制台中打出日志，不再向上级root传递打印信息。

        当然如果你把additivity="false"改成additivity="true"的话，就会打印两次，
        因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次。
    -->
    <logger name="com.komatsukat.spring.boot.controller.UserController" level="WARN" additivity="false">
        <appender-ref ref="console"/>
        <appender-ref ref="fileInfoLog"/>
        <appender-ref ref="fileErrorLog"/>
    </logger>

    <!-- 预发及本地开发环境日志级别设置 -->
    <springProfile name="beta,dev">
        <logger name="com.komatsukat.spring.boot.controller.UserController" level="INFO"/>
    </springProfile>

    <!-- 生产环境日志级别设置 -->
    <springProfile name="production">
        <logger name="com.komatsukat.spring.boot.controller.UserController" level="WARN"/>
    </springProfile>
</configuration>